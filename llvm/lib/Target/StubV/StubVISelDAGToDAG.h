//===---- StubVISelDAGToDAG.h - A dag to dag inst selector for Stub-V -----===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Stub-V target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_STUBV_STUBVISELDAGTODAG_H
#define LLVM_LIB_TARGET_STUBV_STUBVISELDAGTODAG_H

#include "StubV.h"
#include "StubVTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/KnownBits.h"

// Stub-V specific code to select Stub-V machine instructions for
// SelectionDAG operations.
namespace llvm {
class StubVDAGToDAGISel : public SelectionDAGISel {
  const StubVSubtarget *Subtarget = nullptr;

public:
  StubVDAGToDAGISel() = delete;

  explicit StubVDAGToDAGISel(StubVTargetMachine &TargetMachine,
                             CodeGenOptLevel OptLevel)
      : SelectionDAGISel(TargetMachine, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<StubVSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

  bool SelectAddrRegImm(SDValue Addr, SDValue &Base, SDValue &Offset);

// Include the pieces autogenerated from the target description.
#include "StubVGenDAGISel.inc"
};

class StubVDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;
  explicit StubVDAGToDAGISelLegacy(StubVTargetMachine &TargetMachine,
                                   CodeGenOptLevel OptLevel);
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_STUBV_STUBVISELDAGTODAG_H
